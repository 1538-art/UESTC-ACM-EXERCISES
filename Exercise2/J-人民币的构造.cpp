/*
我们都知道人民币的面值是1、2、5、10，为什么是这个数值呢，我们分析了下发现，
从1−10的每个数字都可以由每种面值选出至多一张通过加法和减法（找钱）来构成，
 （比如：1+2=3，5−1=4，5+1=6，5+2=7，1+2+5=8，10−1=9）

但是实际上，我们只需要1、2、7三种面值就可以组成1−10的每一个数字了
 （1+2=3，7−1−2=4，7−2=5，7−1=6，7+1=8，7+2=9，7+1+2=10）

那么现在问题来了，给一个数n，请问最少需要多少种不同的面值就可以构成从1−n的所有数字，
 注意在构成每一个数字时同种面值不能超过1张。

Standard Input
一个数字n（1<=n<=100000）

Standard Output
一个数字，代表最少需要多少种不同的面值可以构成从1−n的所有数字。

Samples
Input	Output
10      3
 */
#include <iostream>

using namespace std;

int main() {
  int n, tol = 1, i = 1;
  cin >> n;
  while (n > tol) {
    //当1-n都可以被表示时，再加一个数2n+1，则，
    // 从n+1到2n都可以用2n+1减去1-n中的某个数获得，2n+2到3n+1同理
    tol = 3 * tol + 1;
    i++;
  }
  cout << i << endl;
  return 0;
}
/*
 * 1,1:1
 * 2,4:1,3
 * 3,13:1,3,9
 * 4,40:1,3,9,27
 */